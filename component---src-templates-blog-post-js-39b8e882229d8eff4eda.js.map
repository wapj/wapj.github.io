{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/components/comment.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","canonical","title","description","image","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","console","log","charSet","name","content","property","defaultProps","Comment","React","memo","repo","theme","containerRef","createRef","useLayoutEffect","utterances","document","createElement","attributes","src","label","crossOrigin","async","Object","entries","forEach","key","value","setAttribute","current","appendChild","ref","displayName","require","data","pageContext","post","markdownRemark","frontmatter","html","slug","next","prev","menu","path","childImageSharp","resize","excerpt","style","clear","dangerouslySetInnerHTML","__html","fontFamily","to","fields","marginBottom"],"mappings":"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","file":"component---src-templates-blog-post-js-39b8e882229d8eff4eda.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"@reach/router\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SEO = ({ canonical, title, description, image, article }) => {\n  const { pathname } = useLocation();\n  const { site } = useStaticQuery(query);\n\n  const { defaultTitle, titleTemplate, defaultDescription, siteUrl, defaultImage, twitterUsername } = site.siteMetadata;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  };\n\n  console.log(pathname);\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta charSet=\"utf-8\" />\n      <title>{title}</title>  \n      <meta name=\"google-site-verification\" content=\"DKf0uKbVabYGKz0sq8wWSyZz_1vtPx3Pey1ifAguz-E\" />\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n      {seo.description && <meta property=\"og:description\" content={seo.description} />}\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {twitterUsername && <meta name=\"twitter:creator\" content={twitterUsername} />}\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n      {seo.description && <meta name=\"twitter:description\" content={seo.description} />}\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n};\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`;\n","import React, { createRef, useLayoutEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\n\n\nconst Comment = React.memo(({ repo, theme ='github-light'}) => {\n  const containerRef = createRef();\n\n  useLayoutEffect(() => {\n    const utterances = document.createElement('script');\n\n    const attributes = {\n      src,\n      repo,\n      theme,\n      'issue-term': 'pathname',\n      label: '‚ú®üí¨ comments ‚ú®',\n      crossOrigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    containerRef.current.appendChild(utterances);\n  }, [containerRef, repo, theme]);\n\n  return <div ref={containerRef} />;\n});\n\nComment.displayName = 'Utterances';\n\nexport default Comment;\n","import React from \"react\";\n\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Comment from \"../components/comment\";\n\nrequire(`gatsby-remark-mathjax-ssr/mathjax.css`);\n\nexport default ({ data, pageContext }) => {\n  const post = data.markdownRemark;\n  const title = post.frontmatter.title;\n  const html = post.html;\n  const { slug, next, prev } = pageContext;\n\n  return (\n    <Layout menu=\"blog\" title={post.frontmatter.title}>\n      <SEO\n        path={slug}\n        title={post.frontmatter.title}\n        image={post.frontmatter.image?.childImageSharp?.resize.src}\n        description={post.excerpt}\n      />\n      <div style={{ clear: \"both\" }}>\n        <h1>{title}</h1>\n\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n\n        <hr></hr>\n        <div style={{ fontFamily: \"avenir\" }}>\n          {prev && <Link to={prev.fields.slug}>Ïù¥Ï†ÑÍ∏Ä: {`${prev.frontmatter.title}`}</Link>}\n        </div>\n        <div style={{ marginBottom: \"1rem\", fontFamily: \"avenir\" }}>\n          {next && <Link to={next.fields.slug}>Îã§ÏùåÍ∏Ä: {`${next.frontmatter.title}`}</Link>}\n        </div>\n      </div>\n      <div>\n        <Comment repo=\"wapj/blog\" />\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      excerpt(pruneLength: 100, truncate: false, format: HTML)\n      tableOfContents\n      timeToRead\n      frontmatter {\n        title\n        tags\n        category\n        image: featured {\n          childImageSharp {\n            resize {\n              src\n              height\n              width\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}