{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/introduce-poetry/","result":{"data":{"markdownRemark":{"html":"<h2>poetry 소개</h2>\n<p><code class=\"language-text\">poetry</code>는 파이썬 의존성 관리 툴입니다.\n단순하게 의존성 관리만 잘하는 툴이라면 추천할 이유가 별로 없을 것입니다. <code class=\"language-text\">poetry</code>는 단순하게 잘 한다 정도를 넘어서서 매우 잘 지원 해줍니다. <code class=\"language-text\">poetry.lock</code>을 사용해서 프로젝트의 의존성을 다른 환경에서도 동일하게 유지할 수 있고, 각 환경에서의 자동완성도 꽤나 잘 지원합니다.</p>\n<p>또한, 기존 파이썬 패키지 관리 툴에서 볼 수 없었던, <code class=\"language-text\">build</code>와 <code class=\"language-text\">publish</code>까지 지원해주고 있어서, 실제로 프로젝트를 만들고 저장소에 배포까지 하고자 하는 사람에게는 굉장히 좋은 도구라고 생각됩니다.</p>\n<p>깃헙의 <a href=\"https://github.com/python-poetry\">python-poetry</a> 라는 계정에서 관리되는데, poetry 하나를 위해서 따로 만든 프로젝트가 있을 정도로 꽤나 정성스럽게 만든 프로젝트입니다.</p>\n<p>또한 사용법도 기존에 npm을 사용해 본적이 있다면 아주 친숙한 명령어들로 구성되어 있습니다.</p>\n<p>단점이라면 새로 커맨드를 익혀야 하는 문제가 있으며, 기존의 프로젝트에 적용하기에는 약간 부담스러울 수 있다는 것입니다.</p>\n<p>개인적으로는 새로만드는 프로젝트라면 주저없이 <code class=\"language-text\">poetry</code>를 써보라고 추천하고 싶습니다.</p>\n<p>본 문서는 <code class=\"language-text\">poetry</code>의 설치 및 기본적인 사용법을 정리해서 조금이라도 많은 분이 좋은 프로젝트 환경을 구축하도록 돕기위한 글입니다. 시간이 지나면 본 문서의 내용과 달라질 수 있으므로 최대한 <a href=\"https://python-poetry.org/docs\">공식 사이트의 문서</a> 를 참고하도록 합시다.</p>\n<h2>설치</h2>\n<h3>리눅스에서 설치 하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py <span class=\"token operator\">|</span> python</code></pre></div>\n<h3>pip 로 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> --user poetry</code></pre></div>\n<p>설치를 하게되면 <code class=\"language-text\">poetry</code> 명령이 설치됩니다.\n<code class=\"language-text\">poetry</code> 명령어는 <code class=\"language-text\">$HOME/.poetry/bin</code> 에 저장되는데,\n<code class=\"language-text\">PATH</code> 환경 변수에도 추가가 됩니다. 추가가 되지 않았다면,\n<code class=\"language-text\">.bash_profile</code> 등의 파일에 <code class=\"language-text\">PATH</code> 의 환경변수에 추가해주세요.</p>\n<p>패스에 추가하지 않고 바로 사용하려면 아래 명령어를 입력해주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> <span class=\"token environment constant\">$HOME</span>/.poetry/env</code></pre></div>\n<h3>탭완성(tab completion) 활성화하기</h3>\n<p><code class=\"language-text\">poetry</code> 는 Bash, Fish, Zsh 에서 탭완성을 지원합니다.\n<code class=\"language-text\">poetry help completions</code> 명령어를 사용하면 각 쉘환경별 도움말을 확인할 수 있습니다.</p>\n<p>귀찮으시면 아래 커맨드들을 확인하시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Bash</span>\npoetry completions <span class=\"token function\">bash</span> <span class=\"token operator\">></span> /etc/bash_completion.d/poetry.bash-completion\n\n<span class=\"token comment\"># Bash (Homebrew)</span>\npoetry completions <span class=\"token function\">bash</span> <span class=\"token operator\">></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix<span class=\"token variable\">)</span></span>/etc/bash_completion.d/poetry.bash-completion\n\n<span class=\"token comment\"># Fish</span>\npoetry completions fish <span class=\"token operator\">></span> ~/.config/fish/completions/poetry.fish\n\n<span class=\"token comment\"># Fish (Homebrew)</span>\npoetry completions fish <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>brew --prefix<span class=\"token punctuation\">)</span>/share/fish/vendor_completions.d/poetry.fish\n\n<span class=\"token comment\"># Zsh</span>\npoetry completions <span class=\"token function\">zsh</span> <span class=\"token operator\">></span> ~/.zfunc/_poetry\n\n<span class=\"token comment\"># Zsh (Homebrew)</span>\npoetry completions <span class=\"token function\">zsh</span> <span class=\"token operator\">></span> <span class=\"token variable\"><span class=\"token variable\">$(</span>brew --prefix<span class=\"token variable\">)</span></span>/share/zsh/site-functions/_poetry\n\n<span class=\"token comment\"># Zsh (Oh-My-Zsh)</span>\n<span class=\"token function\">mkdir</span> <span class=\"token variable\">$ZSH</span>/plugins/poetry\npoetry completions <span class=\"token function\">zsh</span> <span class=\"token operator\">></span> <span class=\"token variable\">$ZSH</span>/plugins/poetry/_poetry\n\n<span class=\"token comment\"># Zsh (prezto)</span>\npoetry completions <span class=\"token function\">zsh</span> <span class=\"token operator\">></span> ~/.zprezto/modules/completion/external/src/_poetry</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">zsh</code> 에서는 ~/.zshrc <code class=\"language-text\">compinit</code> 앞에 <code class=\"language-text\">fpath+=~/.zfunc</code> 을 추가해줍니다.</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">oh-my-zsh</code> 에서는 ~/.zshrc 의 plugins에 poetry 를 추가해줘야 합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">plugins<span class=\"token punctuation\">(</span>\n    poerty\n    <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>간단 사용법</h2>\n<h3>프로젝트 셋업</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poetry new my-project</code></pre></div>\n<p>위의 명령으로 프로젝트를 생성하면 아래와 같은 구조의 프로젝트가 생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">my-project tree\n<span class=\"token builtin class-name\">.</span>\n├── README.rst\n├── my_project\n│   └── __init__.py\n├── pyproject.toml\n└── tests\n    ├── __init__.py\n    └── test_my_project.py</code></pre></div>\n<p>위에 보이는 <code class=\"language-text\">pyproject.toml</code> 파일이 바로 의존성을 관리하는 파일입니다.\n열어보면 아래와 같이 생겼습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre class=\"language-toml\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">name</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"my-project\"</span>\n<span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.1.0\"</span>\n<span class=\"token key property\">description</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token key property\">authors</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"andy.sg\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry.dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">python</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"^3.8\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">tool.poetry.dev-dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">pytest</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"^5.2\"</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token table class-name\">build-system</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">requires</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"poetry>=0.12\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">build-backend</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"poetry.masonry.api\"</span></code></pre></div>\n<p>의존성은 <code class=\"language-text\">[tool.poetry.dependencies]</code> 와 <code class=\"language-text\">[tool.poetry.dev-dependencies]</code> 에서 관리하고 있습니다. 의존성을 추가하고 싶다면 <code class=\"language-text\">add</code> 서브 커맨드를 사용하면 됩니다. 장고를 한번 추가해보도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ poetry <span class=\"token function\">add</span> django</code></pre></div>\n<p>아래와 같이 출력이 나오게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Using version ^3.0.7 <span class=\"token keyword\">for</span> django\n\nUpdating dependencies\nResolving dependencies<span class=\"token punctuation\">..</span>. <span class=\"token punctuation\">(</span><span class=\"token number\">7</span>.1s<span class=\"token punctuation\">)</span>\n\nWriting lock <span class=\"token function\">file</span>\n\n\nPackage operations: <span class=\"token number\">1</span> install, <span class=\"token number\">9</span> updates, <span class=\"token number\">0</span> removals\n\n  - Updating pyparsing <span class=\"token punctuation\">(</span><span class=\"token number\">2.4</span>.6 -<span class=\"token operator\">></span> <span class=\"token number\">2.4</span>.7<span class=\"token punctuation\">)</span>\n  - Updating six <span class=\"token punctuation\">(</span><span class=\"token number\">1.13</span>.0 -<span class=\"token operator\">></span> <span class=\"token number\">1.15</span>.0<span class=\"token punctuation\">)</span>\n  - Installing asgiref <span class=\"token punctuation\">(</span><span class=\"token number\">3.2</span>.7<span class=\"token punctuation\">)</span>\n  - Updating more-itertools <span class=\"token punctuation\">(</span><span class=\"token number\">8.1</span>.0 -<span class=\"token operator\">></span> <span class=\"token number\">8.3</span>.0<span class=\"token punctuation\">)</span>\n  - Updating packaging <span class=\"token punctuation\">(</span><span class=\"token number\">20.1</span> -<span class=\"token operator\">></span> <span class=\"token number\">20.4</span><span class=\"token punctuation\">)</span>\n  - Updating pytz <span class=\"token punctuation\">(</span><span class=\"token number\">2019.3</span> -<span class=\"token operator\">></span> <span class=\"token number\">2020.1</span><span class=\"token punctuation\">)</span>\n  - Updating sqlparse <span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span>.0 -<span class=\"token operator\">></span> <span class=\"token number\">0.3</span>.1<span class=\"token punctuation\">)</span>\n  - Updating wcwidth <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span>.8 -<span class=\"token operator\">></span> <span class=\"token number\">0.2</span>.3<span class=\"token punctuation\">)</span>\n  - Updating django <span class=\"token punctuation\">(</span><span class=\"token number\">2.2</span>.9 -<span class=\"token operator\">></span> <span class=\"token number\">3.0</span>.7<span class=\"token punctuation\">)</span>\n  - Updating pytest <span class=\"token punctuation\">(</span><span class=\"token number\">5.3</span>.5 -<span class=\"token operator\">></span> <span class=\"token number\">5.4</span>.3<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Writing lock file</code> 에서 생성되는 파일이 바로 <code class=\"language-text\">poetry.lock</code> 파일인데,\n<code class=\"language-text\">poetry.lock</code> 파일이 있으면 내가 작성하고 있는 프로젝트의 의존성과 완전히 동일한 의존성을 가지도록 할 수 있습니다. 그러니 <code class=\"language-text\">poetry.lock</code> 파일을 꼭 저장소에 커밋 하도록 합시다.</p>\n<p><code class=\"language-text\">pyproject.toml</code> 을 보면 아래와 같이 django 의존성이 추가되어 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>tool.poetry.dependencies<span class=\"token punctuation\">]</span>\npython <span class=\"token operator\">=</span> <span class=\"token string\">\"^3.8\"</span>\ndjango <span class=\"token operator\">=</span> <span class=\"token string\">\"^3.0.7\"</span></code></pre></div>\n<h3>버전 제약사항</h3>\n<p>django 의존성 설정을 보면 <code class=\"language-text\">\"^3.0.7\"</code> 이라고 되어 있습니다. 여기서 <code class=\"language-text\">^(캐럿)</code> 의 의미는 ( >= 3.0.7, &#x3C; 4.0.0) 의 의미입니다. 즉 <code class=\"language-text\">3.9999....99999</code> 버전까지도 설치가 된다는 얘기입니다.</p>\n<p><a href=\"https://python-poetry.org/docs/dependency-specification/\">의존성 스펙</a> 문서를 보면 좀더 자세히 나와 있습니다.</p>\n<h2>의존성을 최신으로 업데이트하기</h2>\n<p>아래의 커맨드를 입력하면 됩니다.\n<code class=\"language-text\">$ poetry update</code></p>\n<p>위 커맨드는 <code class=\"language-text\">poetry.lock</code> 파일을 삭제후 <code class=\"language-text\">poetry install</code> 하는 것과 동일합니다.</p>\n<h2>패키징</h2>\n<p>poerty를 사용해서 <code class=\"language-text\">tarball</code> <code class=\"language-text\">wheel</code> 같은 배포가 가능한 파일로 빌드할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poerty build</code></pre></div>\n<p>위에서 만든 my-project 에서 실행하면 아래와 같이 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Building my-project <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span>.0<span class=\"token punctuation\">)</span>\n - Building sdist\n - Built my-project-0.1.0.tar.gz\n\n - Building wheel\n - Built my_project-0.1.0-py3-none-any.whl</code></pre></div>\n<p>실행후 <code class=\"language-text\">dist</code> 디렉토리에 가보면 아래와 같이 압축된 파일들이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">my-project-0.1.0.tar.gz\nmy_project-0.1.0-py3-none-any.whl</code></pre></div>\n<h2>명령어들</h2>\n<h3>new</h3>\n<p><code class=\"language-text\">new</code> 명령어로 새로운 프로젝트를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry new my-site</code></pre></div>\n<p>위 명령어를 실행하면 아래와 같은 기본 디렉토리 구성을 만들어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">my-site\n├── pyproject.toml\n├── README.rst\n├── src\n│   └── my_site\n│       └── __init__.py\n└── tests\n    ├── __init__.py\n    └── test_my_site.py</code></pre></div>\n<h3>init</h3>\n<p><code class=\"language-text\">init</code> 커맨드는 <code class=\"language-text\">pyproject.toml</code> 파일을 인터렉티브 하게 만들 수 있도록 도와줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry init</code></pre></div>\n<h3>install</h3>\n<p><code class=\"language-text\">install</code> 커맨드는 현재 프로젝트의 <code class=\"language-text\">pyproject.toml</code> 파일을 읽어서 의존성 패키지를 설치해줍니다.\n<code class=\"language-text\">poetry.lock</code> 이 없으면 만들어주고 있으면 해당파일을 사용하게됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 의존성 설치\npoetry install\n\n# 개발환경의 의존성은 빼고 설치\npoetry install --no-dev\n\n# -E 또는 --extras 로 추가 의존성을 설정가능\npoetry install --extras \"mysql redis\"\npoerty install -E mysql -E redis</code></pre></div>\n<h3>update</h3>\n<p>의존성 패키지의 버전을 업데이트하고 <code class=\"language-text\">poetry.lock</code> 파일을 업데이트 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 패키지 업데이트\npoerty update\n\n# 하나씩 지정해서 업데이트도 가능\npoetry update requests toml\n\n# 업데이트는 하지 않고 poetry.lock 만 업데이트\npoerty update --lock</code></pre></div>\n<h3>add</h3>\n<p>패키지설정을 pyproject.toml 에 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry add django\n\n# 개발환경에서 필요한 패키지 설치\npoetry add pytest factory-boy --dev\n\n# 버전을 지정가능\npoetry add django@^3.0.0\npoetry add \"django=3.0.0\"\n\n# 최신버전을 설치\npoetry add django@latest\n\n# 깃 저장소에 있는 패키지 설치\npoetry add git+https://github.com/django/django.git\n\n# 깃 저장소의 패키지에서 브랜치를 지정\npoetry add git+https://github.com/django/django.git#stable/2.2.x\n\n# 로컬에 디렉토리의 파일로 설치하기\npoetry add ./my-package/\npoetry add ./my-package/dist/my-package-0.1.0.tar.gz\npoetry add ./my-package/dist/my-package-0.1.0.whl</code></pre></div>\n<h3>remove</h3>\n<p>패키지 삭제</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry remove flask\n\n# 개발환경 패키지 삭제\npoetry remove pytest</code></pre></div>\n<h3>show</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 설치된 모든 패키지를 보여준다.\npoetry show\n\n# 개발환경용 제외하고 보여준다.\npoetry show --no-dev\n\n# 특정패키지를 지정하면 상세내용을 보여줍니다.\npoetry show django\n\n# 최신 버전을 보여준다.\npoetry show --latest (-l)\n\n# 업데이트를 해야하는 패키지들을 보여준다.\npoetry show --outdate (-o)\n\n# 의존성 트리를 보여준다.\npoetry show --tree</code></pre></div>\n<h3>build</h3>\n<p>위에도 적었지만 소스를 배포가능한 형태로(tarball, wheel)빌드합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry build</code></pre></div>\n<h3>publish</h3>\n<p>아래 명령어로 PyPI에 배포할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">poerty publish</code></pre></div>\n<p>배포를 하려면 PyPI 계정이 필요합니다.\n계정이 없다면 <a href=\"https://pypi.org/account/register/\">여기를 클릭</a> 하시고 하나 만드셔도 좋습니다.\n프로젝트명이 겹치면 배포를 할 수 없으니, 자신만의 독특한 프로젝트 명을 정해서 배포를 해보도록 합시다.</p>\n<h3>config</h3>\n<p><code class=\"language-text\">config</code> 커맨드로 poetry 관련 설정을 변경할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 설정보기\npoetry config --list\n\n\n# 설정법\npoetry config [options] [setting-key] [setting-value1] ... [setting-valueN]</code></pre></div>\n<h3>run</h3>\n<p>프로젝트의 virtualenv 에 커맨드를 전달하여 실행하게 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry run python -V</code></pre></div>\n<h3>check</h3>\n<p><code class=\"language-text\">pyproject.toml</code> 의 유효함을 체크하는 명령어입니다.</p>\n<h3>search</h3>\n<p>패키지를 찾기위한 커맨드입니다.\n예를들어 beautifulsoup 의 패키지명의 철자가 기억이 안나고 beautiful 만 기억나면\n아래와 같이 할 수 있습니다 .</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ poetry search beautiful | grep soup\n\n---------------------------------\n# output\nbeautifulsoup (3.2.2)\nbeautifulsoup4 (4.9.1)</code></pre></div>\n<h3>lock</h3>\n<p><code class=\"language-text\">pyproject.toml</code> 에 설정된 의존성들에 대한 lock 파일을 생성합니다. (설치X)</p>\n<h3>export</h3>\n<p>export 명령어는 lock 파일을 사용해서 다른 의존성 포맷으로 변경할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">poetry export -f requirements.txt > requirements.txt</code></pre></div>\n<h2>가상 환경 관리하기</h2>\n<p>poetry 로 가상환경(virtualenv)을 관리 할 수 있습니다.</p>\n<p>일반적으로 아래와 같이 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ poetry <span class=\"token function\">env</span> use <span class=\"token punctuation\">{</span>파이썬경로<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약에 python3 이 패스에 잡혀 있는 상황이라면 모든 경로를 적어주지 않아도 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ poetry <span class=\"token function\">env</span> use python3</code></pre></div>\n<h3>가상환경 정보보기</h3>\n<p><code class=\"language-text\">poetry env info</code> 커맨드로 환경 정보를 확인할 수 있습니다.</p>\n<p>저의 경우는 아래와 같이 출력되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Virtualenv\nPython:         <span class=\"token number\">3.8</span>.1\nImplementation: CPython\nPath:           /Users/gyus/Library/Caches/pypoetry/virtualenvs/my-project-0CozYJQl-py3.8\nValid:          True\n\nSystem\nPlatform: darwin\nOS:       posix\nPython:   /Users/gyus/.pyenv/versions/3.8.1</code></pre></div>\n<p>단순하게 가상환경의 path만 알고 싶은 경우라면 <code class=\"language-text\">--path</code> 옵션을 주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ poetry <span class=\"token function\">env</span> info --path</code></pre></div>\n<h3>가상환경 리스트 보기</h3>\n<p>만들어진 가상환경의 리스트는 아래의 명령어로 확인 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ poetry <span class=\"token function\">env</span> list</code></pre></div>\n<h3>가상환경 삭제하기</h3>\n<p>삭제는 아래의 명령어로 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ poetry <span class=\"token function\">env</span> remove <span class=\"token punctuation\">{</span>python경로<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>마무리</h2>\n<p>파이썬은 nodejs, ruby 보다는 상대적으로 프로젝트 환경 관리가 용이하지 않다고 느낀적이 많이 있는데,\n<code class=\"language-text\">poetry</code> 는 기존에 사용하던 pyenv, virtualenv를 추가적인 연동 작업없이 자연스럽게 사용할 수 있게 해줍니다.\n거기다 패키징과 배포를 쉽게 할 수 있도록 커맨드를 만들어 둔 점이 좋다고 생각합니다.</p>\n<p>나온지 오래되지 않은 툴이기에 기존에 사용하던 프로젝트에 적용시에는 조심히 적용해야하겠지만,\n새로만드는 프로젝트라면 과감히 적용해보는 것은 어떨까요?!</p>\n<p>pipenv, pyenv, virutalenv 등등 많은 버전관리, 패키지 관리 툴들을 사용해보았지만,\n파이썬에서 앞으로의 프로젝트 및 패키지 관리는 <code class=\"language-text\">poetry</code> 를 사용하는 사람들이 많아질 것 같습니다.</p>\n<p>부족한 글이지만, <code class=\"language-text\">poetry</code> 사용에 도움이 되었으면 좋겠습니다.</p>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://python-poetry.org/\">poetry 공식사이트</a></li>\n<li><a href=\"https://spoqa.github.io/2019/08/09/brand-new-python-dependency-manager-poetry.html\">파이썬 의존성 관리자 Poetry 사용기</a></li>\n</ul>","excerpt":"<h2>poetry 소개</h2>\n<p><code class=\"language-text\">poetry</code>는 파이썬 의존성 관리 툴입니다.\n단순하게 의존성 관리만 잘하는 툴이라면 추천할 이유가 별로 없을 것입니다. <code class=\"language-text\">poetry</code>는 단순하게 잘 한다 정도를 넘어서서 매우 잘 지원 해줍니다. <code class=\"language-text\">poetry.lock</code>…</p>","tableOfContents":"<ul>\n<li><a href=\"/2020/introduce-poetry/#poetry-%EC%86%8C%EA%B0%9C\">poetry 소개</a></li>\n<li>\n<p><a href=\"/2020/introduce-poetry/#%EC%84%A4%EC%B9%98\">설치</a></p>\n<ul>\n<li><a href=\"/2020/introduce-poetry/#%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-%EC%84%A4%EC%B9%98-%ED%95%98%EA%B8%B0\">리눅스에서 설치 하기</a></li>\n<li><a href=\"/2020/introduce-poetry/#pip-%EB%A1%9C-%EC%84%A4%EC%B9%98\">pip 로 설치</a></li>\n<li><a href=\"/2020/introduce-poetry/#%ED%83%AD%EC%99%84%EC%84%B1tab-completion-%ED%99%9C%EC%84%B1%ED%99%94%ED%95%98%EA%B8%B0\">탭완성(tab completion) 활성화하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/introduce-poetry/#%EA%B0%84%EB%8B%A8-%EC%82%AC%EC%9A%A9%EB%B2%95\">간단 사용법</a></p>\n<ul>\n<li><a href=\"/2020/introduce-poetry/#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%85%8B%EC%97%85\">프로젝트 셋업</a></li>\n<li><a href=\"/2020/introduce-poetry/#%EB%B2%84%EC%A0%84-%EC%A0%9C%EC%95%BD%EC%82%AC%ED%95%AD\">버전 제약사항</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/introduce-poetry/#%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EC%B5%9C%EC%8B%A0%EC%9C%BC%EB%A1%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%98%EA%B8%B0\">의존성을 최신으로 업데이트하기</a></li>\n<li><a href=\"/2020/introduce-poetry/#%ED%8C%A8%ED%82%A4%EC%A7%95\">패키징</a></li>\n<li>\n<p><a href=\"/2020/introduce-poetry/#%EB%AA%85%EB%A0%B9%EC%96%B4%EB%93%A4\">명령어들</a></p>\n<ul>\n<li><a href=\"/2020/introduce-poetry/#new\">new</a></li>\n<li><a href=\"/2020/introduce-poetry/#init\">init</a></li>\n<li><a href=\"/2020/introduce-poetry/#install\">install</a></li>\n<li><a href=\"/2020/introduce-poetry/#update\">update</a></li>\n<li><a href=\"/2020/introduce-poetry/#add\">add</a></li>\n<li><a href=\"/2020/introduce-poetry/#remove\">remove</a></li>\n<li><a href=\"/2020/introduce-poetry/#show\">show</a></li>\n<li><a href=\"/2020/introduce-poetry/#build\">build</a></li>\n<li><a href=\"/2020/introduce-poetry/#publish\">publish</a></li>\n<li><a href=\"/2020/introduce-poetry/#config\">config</a></li>\n<li><a href=\"/2020/introduce-poetry/#run\">run</a></li>\n<li><a href=\"/2020/introduce-poetry/#check\">check</a></li>\n<li><a href=\"/2020/introduce-poetry/#search\">search</a></li>\n<li><a href=\"/2020/introduce-poetry/#lock\">lock</a></li>\n<li><a href=\"/2020/introduce-poetry/#export\">export</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2020/introduce-poetry/#%EA%B0%80%EC%83%81-%ED%99%98%EA%B2%BD-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">가상 환경 관리하기</a></p>\n<ul>\n<li><a href=\"/2020/introduce-poetry/#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%A0%95%EB%B3%B4%EB%B3%B4%EA%B8%B0\">가상환경 정보보기</a></li>\n<li><a href=\"/2020/introduce-poetry/#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%B3%B4%EA%B8%B0\">가상환경 리스트 보기</a></li>\n<li><a href=\"/2020/introduce-poetry/#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\">가상환경 삭제하기</a></li>\n</ul>\n</li>\n<li><a href=\"/2020/introduce-poetry/#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></li>\n<li><a href=\"/2020/introduce-poetry/#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>","timeToRead":8,"frontmatter":{"title":"파이썬 패키지 관리툴 poetry 소개","tags":["python","poetry"],"category":"dev","image":null}}},"pageContext":{"slug":"/2020/introduce-poetry/","next":{"fields":{"slug":"/2020/how-to-install-python-on-windows/"},"frontmatter":{"title":"윈도우에 파이썬을 설치하는 방법 5가지","tags":["python","python install","windows"],"category":"dev","image":null}},"prev":{"fields":{"slug":"/2020/ansible-up-and-running/"},"frontmatter":{"title":"앤서블 시작과 실행을 읽은 후기","tags":["ansible","infra"],"category":"dev","image":{"childImageSharp":{"resize":{"src":"/static/8f0cd14021054e13840bbe413ab0aeeb/2244e/featured.jpg","height":500,"width":400}}}}}}},"staticQueryHashes":["3159585216","4202924991"]}