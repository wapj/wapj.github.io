{"componentChunkName":"component---src-templates-blog-post-js","path":"/2018/kotlin_lambda/","result":{"data":{"markdownRemark":{"html":"<h2>람다 써보기</h2>\n<p>익명 클래스로 리스너 구현하기</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// 자바</span>\nbutton<span class=\"token punctuation\">.</span>setOnClickListener <span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> OnClickListener<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    public void onClick<span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">/* 클릭시 수행할 동작 */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 코틀린</span>\nbutton<span class=\"token punctuation\">.</span>setOnClickListener <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 클릭시 수행할 동작 */</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>람다를 사용해서 최대값 찾기</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> people <span class=\"token operator\">=</span> listOf<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"앤디\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"실바\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"캐슬\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nprintln<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span>maxBy <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 멤버 참조를 사용하여 컬렉션 검색</span>\nprintln<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span>minBy<span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// 람다식 문법</span>\n<span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다로 sum 함수 만들기</span>\n<span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">}</span>\nprintln<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>run</em>  : 인자로 받은 람다를 실행해 주는 라이브러리 함수 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">run <span class=\"token punctuation\">{</span> println<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">people.maxBy</code> 리팩토링 하기</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 연장자 찾기 정석 버전</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//가장 뒤에 있는 파라메터 람다는 밖으로 빼낼 수 있다.</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다가 유일한 파라메터인 경우 괄호 삭제해도 됨</span>\n people<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 파라메터 타입 생략 하기  : 컴파일러가 타입을 자동 유출함. 못하는 경우도 있는데 그경우만 명시해주면 됨</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> p <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다의 파라메터가 하나뿐이고 그 타입을 컴파일러가 추론할 수 있는 경우 it이라는 파라메터 명을 사용할 수 있음</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다를 변수에 저장할 때에는 파라메터 타입으 추론할 문맥이 존재하지 않음. 그러므로 파라메터 타입을 생략하면 안됨</span>\ngetAge <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span>getAge<span class=\"token punctuation\">)</span></code></pre></div>\n<p>함수의 파라메터를 람다에서 사용가능</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printMessageWithPrefix</span><span class=\"token punctuation\">(</span>messages<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> prefix<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$prefix</span> <span class=\"token interpolation variable\">$it</span>\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// output </span>\nError <span class=\"token operator\">:</span>  <span class=\"token number\">403</span> forbidden\nError <span class=\"token operator\">:</span>  <span class=\"token number\">404</span> not found</code></pre></div>\n<ul>\n<li>자바와 다른점은 람다가 파이널이 아닌 변수에 접근 가능하고 람다내부에서 값을 변경해도 된다.</li>\n<li>아래는 람다에서 final이 아닌 변수를 사용하고 값을 변경하는 예제이다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">printProblemCounts</span><span class=\"token punctuation\">(</span>responses<span class=\"token operator\">:</span> Collection<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> clientErrors <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">var</span> serverErrors <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    responses<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            clientErrors<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        serverErrors<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$clientErrors</span> client errors, <span class=\"token interpolation variable\">$serverErrors</span> server errors\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">val</span> responses <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"200 OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"418 I'm a teepot\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"500 internal server error\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">printProblemCounts</span><span class=\"token punctuation\">(</span>responses<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// output</span>\n<span class=\"token number\">1</span> client errors<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> server errors</code></pre></div>\n<ul>\n<li>람다를 event handler 혹은 비동기로 사용할때 로컬 변수를 람다에서 변경하는 경우 람다가 실행되는 시점에만 변경된다는 것에 주의해야한다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">tryToCountButtonClick</span><span class=\"token punctuation\">(</span>button<span class=\"token operator\">:</span> Button<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> clicks <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token function\">Click</span> <span class=\"token punctuation\">{</span> clicks<span class=\"token operator\">++</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> clicks\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 함수는 항상 0을 리턴하는데 <code class=\"language-text\">clicks++</code> 부분이 함수가 다 실행되고 실행되기 때문이다. </li>\n</ul>\n<h3>멤버 참조</h3>\n<ul>\n<li>함수를 값으로 변경하고 싶은경우 <code class=\"language-text\">::</code> 연산자를 사용하자</li>\n<li>아래와 같은 표현을 <code class=\"language-text\">멤버 레퍼런스</code> 라고 부른다.</li>\n<li>하나의 함수 또는 프로퍼티에 대응된다.</li>\n<li>람다를 표현하는 간결한 방법이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> getAge <span class=\"token operator\">=</span> Person<span class=\"token operator\">::</span>age\n\n<span class=\"token comment\">// 요거랑 동일함</span>\n<span class=\"token keyword\">val</span> getAge <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>person<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> person<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>age<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 탑레벨 멤버 레퍼런스 `::` 앞의 클래스를 생략</span>\n<span class=\"token keyword\">fun</span> <span class=\"token function\">salute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Salute!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token operator\">::</span>salute<span class=\"token punctuation\">)</span>\nSalute<span class=\"token operator\">!</span></code></pre></div>\n<ul>\n<li>위임을 사용하는 함수인경우 멤버 레퍼런스를 사용하면 편하다 </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> person<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> String <span class=\"token operator\">-></span> <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> nextAction <span class=\"token operator\">=</span> <span class=\"token operator\">::</span>sendEmail</code></pre></div>\n<ul>\n<li>인스턴스의 생성을 지연시키고 싶은경우 <code class=\"language-text\">생성자 레퍼런스</code>를 사용할 수 있다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">val</span> createPerson <span class=\"token operator\">=</span> <span class=\"token operator\">::</span>Person\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">val</span> p <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Andy\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span>Andy<span class=\"token punctuation\">,</span> age<span class=\"token operator\">=</span><span class=\"token number\">38</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>확장함수도 마찬가지로 사용가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">isAdult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">21</span>\n<span class=\"token keyword\">val</span> predicate <span class=\"token operator\">=</span> Person<span class=\"token operator\">::</span>isAdult</code></pre></div>\n<blockquote>\n<p>isAdult는 Person의 멤버가 아니지만, 멤버처럼 사용할 수 있다.</p>\n</blockquote>\n<h3>컬렉션을 위한 함수형 API</h3>\n<ul>\n<li>함수형 스타일은 컬렉션을 다룰때 장점이 많다.</li>\n</ul>\n<h4>필터와 맵</h4>\n<ul>\n<li>필터랑 맵은 컬렉션 처리할때 기본이 되는 함수들이다.</li>\n<li>필터는 참이되는 원소들만 리스트에 보낸다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">val</span> list <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h2>연산자 오버로딩과 관례</h2>\n<ul>\n<li>기존 자바클래스에 대해 확장함수를 구현하면서 관례에 따라 이름을 붙이면 자바코드를 바꾸지 않아도 새로운 기능을 쉽게 부여할 수 있다. </li>\n</ul>\n<h3>산술 연산자 오버로딩</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data class Point(val x: Int, val y: Int) {\n    operator fun plus(other: Point): Point { \n        return Point(x + other.x, y + other.y)\n    }\n}\n\n&gt;&gt;&gt; val p1 = Point(10, 20)\n&gt;&gt;&gt; val p2 = Point(30, 40)\n&gt;&gt;&gt; println(p1 + p2)\noutput\n\nPoint(x=40, y=60)</code></pre></div>\n<ul>\n<li>연산자를 오버로딩 하는 함수 앞에는 <code class=\"language-text\">operator</code> 키워드가 있어야 한다.</li>\n<li>operator 키워드로 plus 함수를 선언하면 <code class=\"language-text\">+</code> 기호로 두 객체를 더할 수 있다.</li>\n<li><code class=\"language-text\">a + b -&gt; a.plus(b)</code> 와 같이 작동한다. </li>\n<li>교환법칙을 자동으로 지원하지 않는다. 필요한 경우 구현해야함.</li>\n<li>확장함수로 정의도 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">operator fun Point.plus(other: Point): Point {\n    return Point(x + other.x, y + other.y)\n}</code></pre></div>\n<p>오버로딩 가능한 산술 연산자 </p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">식</th>\n<th align=\"center\">함수 이름</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">a * b</td>\n<td align=\"center\">times</td>\n</tr>\n<tr>\n<td align=\"center\">a / b</td>\n<td align=\"center\">div</td>\n</tr>\n<tr>\n<td align=\"center\">a % b</td>\n<td align=\"center\">rem</td>\n</tr>\n<tr>\n<td align=\"center\">a + b</td>\n<td align=\"center\">plus</td>\n</tr>\n<tr>\n<td align=\"center\">a - b</td>\n<td align=\"center\">minus</td>\n</tr>\n<tr>\n<td align=\"center\">a += b</td>\n<td align=\"center\">plusAssign</td>\n</tr>\n<tr>\n<td align=\"center\">-a</td>\n<td align=\"center\">unaryMinus</td>\n</tr>\n<tr>\n<td align=\"center\">+a</td>\n<td align=\"center\">unaryPlus</td>\n</tr>\n<tr>\n<td align=\"center\">!a</td>\n<td align=\"center\">not</td>\n</tr>\n<tr>\n<td align=\"center\">++a, a++</td>\n<td align=\"center\">inc</td>\n</tr>\n<tr>\n<td align=\"center\">--a, a--</td>\n<td align=\"center\">dec</td>\n</tr>\n<tr>\n<td align=\"center\">a == b</td>\n<td align=\"center\">equals</td>\n</tr>\n<tr>\n<td align=\"center\">a &#x3C; b, a > b, a &#x3C;= b, a >= b</td>\n<td align=\"center\">compareTo</td>\n</tr>\n<tr>\n<td align=\"center\">arr[1]</td>\n<td align=\"center\">get</td>\n</tr>\n<tr>\n<td align=\"center\">arr[1] = 'a'</td>\n<td align=\"center\">set</td>\n</tr>\n<tr>\n<td align=\"center\">..</td>\n<td align=\"center\">rangeTo</td>\n</tr>\n<tr>\n<td align=\"center\">for a in arr</td>\n<td align=\"center\">iterator</td>\n</tr>\n<tr>\n<td align=\"center\">val (x, y) = p</td>\n<td align=\"center\">component</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code class=\"language-text\">a == b</code> -> <code class=\"language-text\">a?.equals(b) ? : (b == null)</code></li>\n<li>equals는 operator 가 아닌 override 키워드를 앞에 붙인다.</li>\n<li><code class=\"language-text\">a &lt;= b</code> -> <code class=\"language-text\">a.compageTo(b) &lt;= b</code> 로 컴파일됨</li>\n<li><code class=\"language-text\">start..end</code> -> <code class=\"language-text\">start.rangeTo(end)</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Point</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> x<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> y<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">component1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> x\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">component2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> y\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>코틀린 표준에서는 맨앞의 다섯 원소에 대한 componentN을 제공한다.</li>\n<li>compoenent6 부터 에러가 난다. </li>\n</ul>\n<p>코틀린은 비트연산자를 지원하지 않음</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">자바</th>\n<th align=\"center\">코틀린</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">&#x3C;&#x3C;</td>\n<td align=\"center\">shl</td>\n</tr>\n<tr>\n<td align=\"center\">>></td>\n<td align=\"center\">shr</td>\n</tr>\n<tr>\n<td align=\"center\">>>></td>\n<td align=\"center\">ushr</td>\n</tr>\n<tr>\n<td align=\"center\">&#x26;</td>\n<td align=\"center\">and</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"center\">or</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\">xor</td>\n</tr>\n<tr>\n<td align=\"center\">~</td>\n<td align=\"center\">inv</td>\n</tr>\n</tbody>\n</table>\n<h3>위임 프로퍼티 (delegated property)</h3>\n<ul>\n<li>프로퍼티의 값이 변경될때 추가로 동작하는 코드를 위임 시킬 수 있음</li>\n<li>위임을 사용해서 값을 메모리가 아닌, 데이터베이스나 세션, 파일 등에 저장가능</li>\n</ul>\n<p>문법</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> p<span class=\"token operator\">:</span> Type <span class=\"token keyword\">by</span> <span class=\"token function\">Delegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ex)</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Foo <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> delegate <span class=\"token operator\">=</span> <span class=\"token function\">Delegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> p<span class=\"token operator\">:</span> Type\n    <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> delegate<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> delegate<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>p의 get/set 을 Delegate() 에 위임함</li>\n</ul>\n<p>지연 초기화를 위임 프로퍼티로 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> emails <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span> <span class=\"token function\">loadEmails</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>헬퍼클래스를 만들어서 프로퍼티 변경 통지 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">ObservableProperty</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> propName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span> propValue<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">val</span> changeSupport<span class=\"token operator\">:</span> PropertyChangeSupport\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> propValue\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>newValue<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> oldValue <span class=\"token operator\">=</span> propValue\n        propValue <span class=\"token operator\">=</span> newValue\n        changeSupport<span class=\"token punctuation\">.</span><span class=\"token function\">firePropertyChange</span><span class=\"token punctuation\">(</span>propName<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PropertyChangeAware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> _age <span class=\"token operator\">=</span> <span class=\"token function\">ObservableProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> changeSupport<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int\n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _age<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> _age<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">val</span> _salary <span class=\"token operator\">=</span> <span class=\"token function\">ObservableProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"salary\"</span><span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">,</span> changeSupport<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> salary<span class=\"token operator\">:</span> Int \n        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _salary<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> _salary<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ObservableProperty를 프로퍼티 위임으로 사용할 수 있도록 리팩토링</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">ObservableProperty</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">var</span> propValue<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> changeSupport<span class=\"token operator\">:</span> PropertyChageSupport\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> prop<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> propValue\n    <span class=\"token keyword\">operator</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span> prop<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">val</span> oldValue <span class=\"token operator\">=</span> propValue\n        propValue <span class=\"token operator\">=</span> newValue\n        changeSupport<span class=\"token punctuation\">.</span><span class=\"token function\">firePropertyChange</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PropertyChangeAware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> <span class=\"token function\">ObservableProperty</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> changeSupport<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> salary<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> <span class=\"token function\">ObservableProperty</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">,</span> changeSupport<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>by 키워드로 위임 객체를 지정하면 직접 작성했던 코드들을 코틀린 컴파일러가 대신해준다. </li>\n</ul>\n<p>Delegates.observable 표준 라이브러리를 사용하기. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> salary<span class=\"token operator\">:</span> Int\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">PropertyChangeAware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> observer <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        prop<span class=\"token operator\">:</span> KProperty<span class=\"token operator\">&lt;</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> oldValue<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> Int <span class=\"token operator\">-></span> \n            changeSupport<span class=\"token punctuation\">.</span><span class=\"token function\">filrePropertyChange</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span> observer<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> salary<span class=\"token operator\">:</span> Int <span class=\"token keyword\">by</span> Delegates<span class=\"token punctuation\">.</span><span class=\"token function\">observable</span><span class=\"token punctuation\">(</span>salary<span class=\"token punctuation\">,</span> observer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>8장 고차함수 : 파라메터와 리턴값으로 람다 사용하기</h2>\n<ul>\n<li>고차함수는 다른 함수를 인자로 받거나 함수를 리턴하는 함수이다.</li>\n</ul>\n<p>함수타입 선언하기</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> Int <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> print <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 경우는 컴파일러가 알아서 함수타입임을 추론함</li>\n</ul>\n<p><code class=\"language-text\">(파라메터 타입, 파라메터 타입) -&gt; 리턴 타입</code> 이런식으로 좀 더 명시적으로 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> sum<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">,</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Int <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">val</span> action<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>리턴타입이 null 이 되는 경우에는 아래와 같은 식으로 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">var</span> canReturnNull<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>Int<span class=\"token punctuation\">,</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>함수타입과 람다식은 재활용하기 좋은 코드를 만들때 쓸 수 있는 훌륭한 도구이다. </li>\n<li>코드의 일부분을 복사해 붙여 넣고 싶은경우 사용하면 좋다. </li>\n</ul>\n<h3>인라인 함수 : 람다의 부가 비용 없애기</h3>\n<ul>\n<li>inline 변경자를 어떤 함수에 붙이면 컴파일러가 해당 함수를 호출하는 모든 코드를 함수의 몸체에 해당하는 바이트코드로 바꾼다. </li>\n<li>어떤 함수를 inline 으로 선언하면 그 함수의 몸통이 inline이 된다. </li>\n<li>파라메터로 함수를 받는 경우, 파라메터로 넘겨받은 함수를 변수에 한번더 할당하게 되면 인라인으로 사용할 수 없다. </li>\n<li>인라인으로 사용하면 안되는 람다를 파라메터로 사용하는 경우 <code class=\"language-text\">noinline</code> 키워드를 파라메터 앞에 붙여서 인라인으로 바꾸는 것을 금지할 수 있다. </li>\n<li>인라인 키워드를 함수에 붙일때에는 코드 크기에 주의해야한다. 함수의 몸체인 바이트코드가 여기저기 복사되기 때문이다. </li>\n<li><code class=\"language-text\">try-with-resource</code> 와 같은 기능을 제공하는 <code class=\"language-text\">use</code> 라는 함수가 람다를 파라메터로 받으며, 인라인 함수이다.</li>\n</ul>\n<h3>고차 함수 안에서 흐름제어</h3>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> people <span class=\"token operator\">=</span> <span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">lookForAlice</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>person <span class=\"token keyword\">in</span> people<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found!\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not found\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token function\">lookForAlice</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span>\nFound<span class=\"token operator\">!</span></code></pre></div>\n<ul>\n<li>위와 같은 코드를 람다를 사용하는 <code class=\"language-text\">forEach</code> 를 사용해도 된다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">lookForAlice</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    people<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found!\"</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not Found!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>람다 안에서 return 을 사용하면 람다에서만 return 이 호출 되는 것이 아니라 그 람다를 호출하는 함수가 실행을 끝나고 결과값을 리턴한다. </li>\n<li>자신을 둘러싼 블록보다 더 바깥에 있는 블록을 리턴하게 만드는 return 문을 <code class=\"language-text\">nonlocal return</code> 이라 부른다. </li>\n<li>nonlocal return 을 사용할 수 있는 함수는 인라인 함수만 가능하다. </li>\n<li>nonlocal return 이 아닌 경우는 레이블을 붙이는데, <code class=\"language-text\">local return</code> 이라 부른다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">lookforAlice</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    people<span class=\"token punctuation\">.</span>forEach <span class=\"token label symbol\">label@</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token label symbol\">@label</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice might be somewhere\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>함수명을 레이블로 사용도 가능</li>\n<li>람다식에는 레이블이 2개이상 붙을 수 없음</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">lookforAlice</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    people<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token label symbol\">@forEach</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice might be somewhere\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>람다 말고 코드 볼록을 넘기는 방법으로 익명함수를 넘기는 방법이 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">lookforAlice</span><span class=\"token punctuation\">(</span>people<span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Person<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    people<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token comment\">// 가장가까운 함수를 가리킴</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>people<span class=\"token punctuation\">.</span>name<span class=\"token delimiter variable\">}</span></span> is not Alice\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>return 이 실행되면 가장 가까운 <code class=\"language-text\">fun</code> 함수를 리턴한다. </li>\n<li>함수의 body 에서 여러곳에서 return 을 사용해야하는 경우 람다 대신 익명함수를 사용하면 된다.</li>\n</ul>","excerpt":"<h2>람다 써보기</h2>\n<p>익명 클래스로 리스너 구현하기</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// 자바</span>\nbutton<span class=\"token punctuation\">.</span>setOnClickListener <span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> OnClickListener<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    public void onClick<span class=\"token punctuation\">(</span>View view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">/* 클릭시 수행할 동작 */</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 코틀린</span>\nbutton<span class=\"token punctuation\">.</span>setOnClickListener <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* 클릭시 수행할 동작 */</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>람다를 사용해서 최대값 찾기</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> people <span class=\"token operator\">=</span> listOf<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"앤디\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"실바\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">(</span><span class=\"token string\">\"캐슬\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nprintln<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span>maxBy <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 멤버 참조를 사용하여 컬렉션 검색</span>\nprintln<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span>minBy<span class=\"token punctuation\">(</span>Person<span class=\"token operator\">::</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// 람다식 문법</span>\n<span class=\"token punctuation\">{</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다로 sum 함수 만들기</span>\n<span class=\"token keyword\">val</span> sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">}</span>\nprintln<span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><em>run</em>  : 인자로 받은 람다를 실행해 주는 라이브러리 함수 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">run <span class=\"token punctuation\">{</span> println<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">people.maxBy</code> 리팩토링 하기</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 연장자 찾기 정석 버전</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//가장 뒤에 있는 파라메터 람다는 밖으로 빼낼 수 있다.</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다가 유일한 파라메터인 경우 괄호 삭제해도 됨</span>\n people<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 파라메터 타입 생략 하기  : 컴파일러가 타입을 자동 유출함. 못하는 경우도 있는데 그경우만 명시해주면 됨</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> p <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다의 파라메터가 하나뿐이고 그 타입을 컴파일러가 추론할 수 있는 경우 it이라는 파라메터 명을 사용할 수 있음</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 람다를 변수에 저장할 때에는 파라메터 타입으 추론할 문맥이 존재하지 않음. 그러므로 파라메터 타입을 생략하면 안됨</span>\ngetAge <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> p<span class=\"token operator\">:</span> Person <span class=\"token operator\">-></span> p<span class=\"token punctuation\">.</span>age <span class=\"token punctuation\">}</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">maxBy</span><span class=\"token punctuation\">(</span>getAge<span class=\"token punctuation\">)</span></code></pre></div>\n<p>…</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2018/kotlin_lambda/#%EB%9E%8C%EB%8B%A4-%EC%8D%A8%EB%B3%B4%EA%B8%B0\">람다 써보기</a></p>\n<ul>\n<li><a href=\"/2018/kotlin_lambda/#%EB%A9%A4%EB%B2%84-%EC%B0%B8%EC%A1%B0\">멤버 참조</a></li>\n<li>\n<p><a href=\"/2018/kotlin_lambda/#%EC%BB%AC%EB%A0%89%EC%85%98%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%95%A8%EC%88%98%ED%98%95-api\">컬렉션을 위한 함수형 API</a></p>\n<ul>\n<li><a href=\"/2018/kotlin_lambda/#%ED%95%84%ED%84%B0%EC%99%80-%EB%A7%B5\">필터와 맵</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2018/kotlin_lambda/#%EC%97%B0%EC%82%B0%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9%EA%B3%BC-%EA%B4%80%EB%A1%80\">연산자 오버로딩과 관례</a></p>\n<ul>\n<li><a href=\"/2018/kotlin_lambda/#%EC%82%B0%EC%88%A0-%EC%97%B0%EC%82%B0%EC%9E%90-%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9\">산술 연산자 오버로딩</a></li>\n<li><a href=\"/2018/kotlin_lambda/#%EC%9C%84%EC%9E%84-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-delegated-property\">위임 프로퍼티 (delegated property)</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2018/kotlin_lambda/#8%EC%9E%A5-%EA%B3%A0%EC%B0%A8%ED%95%A8%EC%88%98--%ED%8C%8C%EB%9D%BC%EB%A9%94%ED%84%B0%EC%99%80-%EB%A6%AC%ED%84%B4%EA%B0%92%EC%9C%BC%EB%A1%9C-%EB%9E%8C%EB%8B%A4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">8장 고차함수 : 파라메터와 리턴값으로 람다 사용하기</a></p>\n<ul>\n<li><a href=\"/2018/kotlin_lambda/#%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%95%A8%EC%88%98--%EB%9E%8C%EB%8B%A4%EC%9D%98-%EB%B6%80%EA%B0%80-%EB%B9%84%EC%9A%A9-%EC%97%86%EC%95%A0%EA%B8%B0\">인라인 함수 : 람다의 부가 비용 없애기</a></li>\n<li><a href=\"/2018/kotlin_lambda/#%EA%B3%A0%EC%B0%A8-%ED%95%A8%EC%88%98-%EC%95%88%EC%97%90%EC%84%9C-%ED%9D%90%EB%A6%84%EC%A0%9C%EC%96%B4\">고차 함수 안에서 흐름제어</a></li>\n</ul>\n</li>\n</ul>","timeToRead":9,"frontmatter":{"title":"kotlin 람다 써보기","tags":["kotlin"],"category":"dev","image":null}}},"pageContext":{"slug":"/2018/kotlin_lambda/","next":{"fields":{"slug":"/2019/use-gatsby/"},"frontmatter":{"title":"개츠비 안녕~","tags":null,"category":"diary","image":null}},"prev":null}},"staticQueryHashes":["3159585216","4202924991"]}