{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/java17/","result":{"data":{"markdownRemark":{"html":"<h2>자바17은 왜이리 인기가 없나</h2>\n<p>2021년 9월 14일에 자바의 새로운 LTS(Long-Term-Support)버전인 17이 나왔다.\n그런데, 내가 느끼는 반응은 <code class=\"language-text\">나왔는데 뭐?</code> 이렇다.</p>\n<p>보통 새로운 버전이 나오면 <code class=\"language-text\">와 신난다. 새로운기능이 뭐지? 어서 써보고싶다!</code> 이래야 맞는거 아닌가 싶은데,\n우리회사 기준으로 주위에 쓰는 팀이 없다..</p>\n<p>그래서 그런지, 오라클에서 이런글도 써줬다. 왜 옮겨야 하는지, 어떻게 하면 좋은지...\n글쓴이는 JDK8에서 JDK11로 갈때보다 JDK11에서 JDK17로 옮기는것이 훨씬 쉬웠다고 한다.</p>\n<blockquote>\n<p>읽어보면 업글하는데 노력이 좀 드는데... 쓸만해... 정도다... 좀 더 분발하시라 오라클 형님들</p>\n</blockquote>\n<p><a href=\"https://blogs.oracle.com/javamagazine/post/its-time-to-move-your-applications-to-java-17-heres-why-and-heres-how\">이제는 Java17로 옮길 때(why and how) </a></p>\n<h2>자바17로 바꿀려면, 주의해야되는 것들</h2>\n<p>글을 잠깐 읽어보니 업그레이드에 노력(effort)이 필요하다고 되어 있다. 이게 인기가 없는 원인이구나 싶었다.</p>\n<p>업그레이드 내용을 잠깐 보면 변경되는게 꽤 있다.</p>\n<ul>\n<li>JavaFX가 없어진다. <a href=\"https://gluonhq.com/products/javafx/\">gluon</a> 이나 <a href=\"https://mvnrepository.com/artifact/org.openjfx\">OpenJFX</a>를\n사용하라고 가이드가 되어있다.</li>\n<li>폰트들 : 자바는 원래 폰트가 별로 없지만, Java11에 완전 삭제했다. <a href=\"https://poi.apache.org/\">Apache POI</a>를 사용하라고 한다.</li>\n<li>Java Mission Control : 모니터링과 프로파일링에 사용하는 녀석인데, 요녀석도 JDK에 포함되어 있었으나, 이제 따로 받아야한다. <a href=\"https://www.oracle.com/java/technologies/javase/products-jmc8-downloads.html\">JDK Mission Control</a></li>\n<li>Java EE : 자바11에서 Java EE모듈을 삭제했다. JAXB 이런 것 들이다. Java EE는 많으니 표로 알려주고 있다. 아마도... artifactId만 바꾸면 될 것이다.. 아마도..</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>모듈</th>\n<th>바꿔야하는 artifactId</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>java.activation</td>\n<td>jakarta.activation</td>\n</tr>\n<tr>\n<td>java.xml.ws.annotation</td>\n<td>jakarta.anotation-api</td>\n</tr>\n<tr>\n<td>java.transcation</td>\n<td>jakarta.transcation-api</td>\n</tr>\n<tr>\n<td>java.xml.bind</td>\n<td>jakarta.xml.bind-api, jaxb-impl</td>\n</tr>\n<tr>\n<td>java.xml.ws</td>\n<td>jakarta.xml.ws-api, jaxws-rt</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>CORBA : 요녀석도 Java11에 삭제당했다!</li>\n<li>Nashorn : 자바 15에 삭제됐다. <a href=\"https://mvnrepository.com/artifact/org.openjdk.nashorn/nashorn-core\">nashorn-core</a>를 쓰면 된다. 나름 관심있는 기능이었는데 아쉽다.</li>\n<li>시험용 컴파일러들 : 자바17에는 GraalVM의 AOT(ahead-of-time), JIT(just-in-time)컴파일러가 제거된다. 자세한것은 <a href=\"https://openjdk.java.net/jeps/410\">JEP410</a>을 보라고..</li>\n</ul>\n<p>마리안 차이코프스키라는 사람의 글도 보자.</p>\n<p><a href=\"https://marian-caikovski.medium.com/java-17-language-compared-to-java-8-how-modern-java-is-better-than-java-8-65a4e39c448e\">자바8과 자바17비교 모던 자바는 자바8보다 얼마나 좋은가?</a></p>\n<h2>자바8에서 변하는 것들</h2>\n<p>자바의 새로운 피쳐들의 특징은 아래 3가지라고 한다.</p>\n<ul>\n<li>코드의 재사용을 방지</li>\n<li>장황한 코드를 줄이기 (잘했다.)</li>\n<li>Object같은 shared type 인자를 받는 메서드를 오버로딩 하는 메서드들을 사용안함 (shared type이 뭔지 잘모르겠다. 아시는분 댓글로 좀...)</li>\n</ul>\n<h3>캡슐화</h3>\n<ul>\n<li>모듈 : 모듈은 자바9에 새로 생겼고, 내부코드를 애플리케이션에서 숨기기 위해 사용됨</li>\n<li>Sealed Type : 자바15에 추가됨. final 클래스 대신 사용</li>\n</ul>\n<h3>코드의 간결성</h3>\n<ul>\n<li>지역 변수의 타입 추론 : var 키워드를 쓰면 타입추론을 해준다. (코틀린에 있던거 아님?)</li>\n<li><code class=\"language-text\">Switch</code> 표현식 : 자바12에 스위치 표현식이 들어갔다. 이제 <code class=\"language-text\">break</code> 그만 써도 된다. (이런건 자바스크립트에도 없는거라고 자랑함)</li>\n<li>텍스트 블럭: 다른 언어에는 당연한거지만 자바13에 들어갔다. \"\"\" \"\"\" 으로 감싸서 여러줄로 문자열을 쓸 수 있다.</li>\n<li>Records : 불변데이터를 전송할때 편하게 사용할 수 있는 Record 라는 녀석이 생겼다. DB에서 부터 Record 데이터가 건너온다고 하면 불변이니 안심하고 쓸 수 있을 것 같다. (다른데는 원래 다 있던거...)</li>\n</ul>\n<h3>타입캐스팅</h3>\n<ul>\n<li><code class=\"language-text\">instanceof</code>의 패턴매칭 가능. JDK14에 추가됐다.</li>\n<li><code class=\"language-text\">switch</code>문에서 패턴매칭가능 (어? 이거 코틀린에 있던건데?)</li>\n</ul>\n<h2>결론</h2>\n<p>모던 자바는 확실히 예전 자바보다 기능이 쓸만한 것 같다. 코틀린의 영향인지 다른 언어의 영향인지 모르겠으나, 언어차원에서 제공해주는 편의 기능들이 코틀린과 거의 유사해지고 있다.\n이제야 자바가 정신차리고 언어를 좀 개선하는구나 하는 생각이든다. 자바가 이렇게 열심히 하면 애매해지는게 코틀린의 포지션일 것 같다. 코틀린은 어차피 자바를 한번 감싼 녀석이니 순정 좋아하는 사람들은 그냥 자바17을 쓰는게 좋지 않을까. 어쨌거나 새로운 언어를 배우는 것 보다는 원래 있던 자바에 조금 더 편한 기능을 추가하는게 편하긴 할거니까.</p>\n<p>나의 개인적인 결론은 <code class=\"language-text\">일단 자바부터 잘하자</code> 이다.</p>\n<p>왜냐면 앞으로 내가 해야하는 업무의 70%이상이 자바일테니까...ㅎㅎ</p>","excerpt":"<h2>자바17은 왜이리 인기가 없나</h2>\n<p>2021년 9월 14일에 자바의 새로운 LTS(Long-Term-Support)버전인 17이 나왔다.\n그런데, 내가 느끼는 반응은 <code class=\"language-text\">나왔는데 뭐?</code> 이렇다.</p>\n<p>보통 새로운 버전이 나오면 <code class=\"language-text\">와 신난다. 새로운기능이 뭐지? 어서 써보고싶다!</code>…</p>","tableOfContents":"<ul>\n<li><a href=\"/2022/java17/#%EC%9E%90%EB%B0%9417%EC%9D%80-%EC%99%9C%EC%9D%B4%EB%A6%AC-%EC%9D%B8%EA%B8%B0%EA%B0%80-%EC%97%86%EB%82%98\">자바17은 왜이리 인기가 없나</a></li>\n<li><a href=\"/2022/java17/#%EC%9E%90%EB%B0%9417%EB%A1%9C-%EB%B0%94%EA%BF%80%EB%A0%A4%EB%A9%B4-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%95%BC%EB%90%98%EB%8A%94-%EA%B2%83%EB%93%A4\">자바17로 바꿀려면, 주의해야되는 것들</a></li>\n<li>\n<p><a href=\"/2022/java17/#%EC%9E%90%EB%B0%948%EC%97%90%EC%84%9C-%EB%B3%80%ED%95%98%EB%8A%94-%EA%B2%83%EB%93%A4\">자바8에서 변하는 것들</a></p>\n<ul>\n<li><a href=\"/2022/java17/#%EC%BA%A1%EC%8A%90%ED%99%94\">캡슐화</a></li>\n<li><a href=\"/2022/java17/#%EC%BD%94%EB%93%9C%EC%9D%98-%EA%B0%84%EA%B2%B0%EC%84%B1\">코드의 간결성</a></li>\n<li><a href=\"/2022/java17/#%ED%83%80%EC%9E%85%EC%BA%90%EC%8A%A4%ED%8C%85\">타입캐스팅</a></li>\n</ul>\n</li>\n<li><a href=\"/2022/java17/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>","timeToRead":3,"frontmatter":{"title":"Java17을 쓰면 좋을까?","tags":["TIL","java"],"category":"dev","image":{"childImageSharp":{"resize":{"src":"/static/bfd190325621273aaff1c6578e7535e3/1f5c5/java17.webp","height":222,"width":400}}}}}},"pageContext":{"slug":"/2022/java17/","next":null,"prev":{"fields":{"slug":"/diary/2021/chuseok_on_netflix/"},"frontmatter":{"title":"넷플릭스와 함께한 추석","tags":["netflix"],"category":"diary","image":{"childImageSharp":{"resize":{"src":"/static/9fafecc9d438074fdc64ad4a3a78b10a/2244e/20210926_1.jpg","height":249,"width":400}}}}}}},"staticQueryHashes":["3159585216","4202924991"]}