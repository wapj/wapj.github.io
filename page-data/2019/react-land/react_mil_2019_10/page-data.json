{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/react-land/react_mil_2019_10/","result":{"data":{"markdownRemark":{"html":"<h2>react</h2>\n<ul>\n<li><code class=\"language-text\">render</code> 함수만 필요한 경우는 함수형 컴포넌트로 작성하는게 좋다.</li>\n</ul>\n<p>바벨을 사용해서 리액트 javascript 컴파일하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx babel --watch src --out-dir . --presets @babel/preset-react</code></pre></div>\n<h3>클래스형 컴포넌트와 함수형 컴포넌트</h3>\n<ul>\n<li>클래스 컴포넌트는 함수형 컴포넌트가 할 수 있는 모든 일을 할 수 있다.</li>\n<li>새로운 버전(16.8 이후)에서는 함수형 컴포넌트가 좋다.</li>\n</ul>\n<h3>webpack</h3>\n<ul>\n<li>자바스크립트로 만든 프로그램을 배포하기 좋은 형태로 묶어주는 툴이다.</li>\n</ul>\n<h4>웹팩 실행하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx webpack</code></pre></div>\n<h3>create-react-app</h3>\n<p>create-react-app 사용해서 프로젝트 만들기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npx create-react-app {project_name}</code></pre></div>\n<p>시작하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd {project_name}\nnpm start</code></pre></div>\n<p>https를 사용하고 싶을때</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 리눅스 or 맥\nHTTPS=true npm start\n\n# 윈도우라면\nHTTPS=true &amp;&amp; npm start</code></pre></div>\n<p>빌드하기\n<code class=\"language-text\">npm run build</code> 는 배포 환경에서 사용할 파일을 만들어줌</p>\n<p>로컬에 웹서버를 띄워서 확인하기</p>\n<p><code class=\"language-text\">npm install -g serve</code> 로 <code class=\"language-text\">serve</code> 모듈을 설치하고 로컬에 웹서버를 띄워보자</p>\n<p><code class=\"language-text\">server</code> 아니고 <code class=\"language-text\">serve</code> 인것에 주의하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx serve -s build</code></pre></div>\n<p>build 를 할때 10킬로바이트보다 작은 이미지는 별도의 파일로 생성되지 않고 data url 형식으로 자바스크립트 파일에 포함된다. 작은 파일을 요청하는 http 컨넥션이 더 비싸기 때문이다.</p>\n<h4>polyfill</h4>\n<p>core-js 를 사용하면 폴리필을 사용할 수 있다.</p>\n<p>설치</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install core-js</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import &#39;core-js/features/string/pad-start&#39;;\nconst val = &#39;123&#39;.padStart(5, &#39;0&#39;);\n\nconsole.log(val); // 00123</code></pre></div>\n<h4>autoprefixer</h4>\n<p>css의 최신기능을 사용하려면 벤더 접두사가 붙은 이름을 사용해야하는데, <code class=\"language-text\">autoprefixer</code> 패키지를 사용하면 자동으로 접두사가 붙는다.</p>\n<h3>css 작성방법</h3>\n<ul>\n<li>css-module : css파일간 클래스 충돌을 방지해줌</li>\n<li>css-in-js : css코드를 자바스크립트 파일 안에 작성함. <code class=\"language-text\">styled-components</code> 가 가장유명함 <code class=\"language-text\">npm install styled-components</code></li>\n<li>sass : 변수, 믹스인을 사용하여 css코드를 재사용 할 수 있다. <code class=\"language-text\">npm install node-sass</code></li>\n</ul>\n<h3>단일 페이지 애플리케이션 (SPA) 만들기</h3>\n<ul>\n<li>리액트는 SPA로 개발하는 것이 정석이다.</li>\n<li>페이지 전환시의 렌더링을 클라이언트에서 처리한다 -> 네이티브 애플리케이션처럼 동작.</li>\n</ul>","excerpt":"<h2>react</h2>\n<ul>\n<li><code class=\"language-text\">render</code> 함수만 필요한 경우는 함수형 컴포넌트로 작성하는게 좋다.</li>\n</ul>\n<p>바벨을 사용해서 리액트 javascript 컴파일하기</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx babel --watch src --out-dir . --presets @babel/preset-react</code></pre></div>\n<h3>클래스형 컴포넌트와 함수형 컴포넌트</h3>\n<ul>\n<li>클래스 컴포넌트는 함수형 컴포넌트가 할 수 있는 모든 일을 할 수 있다.</li>\n<li>새로운 버전(16.8 이후)에서는 함수형 컴포넌트가 좋다.</li>…</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2019/react-land/react_mil_2019_10/#react\">react</a></p>\n<ul>\n<li><a href=\"/2019/react-land/react_mil_2019_10/#%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8\">클래스형 컴포넌트와 함수형 컴포넌트</a></li>\n<li>\n<p><a href=\"/2019/react-land/react_mil_2019_10/#webpack\">webpack</a></p>\n<ul>\n<li><a href=\"/2019/react-land/react_mil_2019_10/#%EC%9B%B9%ED%8C%A9-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\">웹팩 실행하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2019/react-land/react_mil_2019_10/#create-react-app\">create-react-app</a></p>\n<ul>\n<li><a href=\"/2019/react-land/react_mil_2019_10/#polyfill\">polyfill</a></li>\n<li><a href=\"/2019/react-land/react_mil_2019_10/#autoprefixer\">autoprefixer</a></li>\n</ul>\n</li>\n<li><a href=\"/2019/react-land/react_mil_2019_10/#css-%EC%9E%91%EC%84%B1%EB%B0%A9%EB%B2%95\">css 작성방법</a></li>\n<li><a href=\"/2019/react-land/react_mil_2019_10/#%EB%8B%A8%EC%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-spa-%EB%A7%8C%EB%93%A4%EA%B8%B0\">단일 페이지 애플리케이션 (SPA) 만들기</a></li>\n</ul>\n</li>\n</ul>","timeToRead":2,"frontmatter":{"title":"MIL 10월에 공부한 것들","tags":["TIL"],"category":"dev","image":null}}},"pageContext":{"slug":"/2019/react-land/react_mil_2019_10/","next":{"fields":{"slug":"/2020/jupyter-notebook-pdf-problem/"},"frontmatter":{"title":"jupyter notebook 에서 pdf 만들기","tags":["jupyter notebook"],"category":"dev","image":null}},"prev":{"fields":{"slug":"/2019/data-intensive-applications/chapter9/"},"frontmatter":{"title":"데이터 중심 어플리케이션 - 9장 일관성과 합의","tags":null,"category":"dev","image":null}}}},"staticQueryHashes":["3159585216","4202924991"]}