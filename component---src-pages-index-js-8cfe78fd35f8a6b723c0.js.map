{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/title.js","webpack:///./src/components/seo.js"],"names":["data","menu","title","description","defaultImage","css","allMarkdownRemark","totalCount","edges","map","node","key","id","to","fields","slug","frontmatter","image","src","childImageSharp","resize","width","alt","rhythm","date","tags","value","_","excerpt","blogTitles","parseInt","Math","random","length","SEO","canonical","article","pathname","useLocation","useStaticQuery","query","site","siteMetadata","defaultTitle","titleTemplate","defaultDescription","siteUrl","twitterUsername","seo","url","console","log","charSet","name","content","property","defaultProps"],"mappings":"2WAQe,sBAAe,IAAZA,EAAW,EAAXA,KAChB,OACE,YAAC,IAAD,CAAQC,KAAK,QACX,YAAC,IAAD,CAAKC,MAAM,YAAYC,YAAY,oBAAoBC,aAAa,oBACpE,uBACE,kBACEC,IAAG,GAKFH,KAEH,sBAAKF,EAAKM,kBAAkBC,WAA5B,UACCP,EAAKM,kBAAkBE,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,mBAAKC,IAAKD,EAAKE,IACb,YAAC,IAAD,CACEC,GAAIH,EAAKI,OAAOC,KAChBV,IAAG,GAKH,qBACGK,EAAKM,YAAYC,OAChB,mBAAKC,IAAKR,EAAKM,YAAYC,MAAME,gBAAgBC,OAAOF,IAAKG,MAAM,OAAOC,IAAI,MAGlF,kBACEjB,IAAKA,YAAF,iBACgBkB,YAAO,EAAI,GAD3B,MAIFb,EAAKM,YAAYd,OAEpB,oBACEG,IAAG,GAIFK,EAAKM,YAAYQ,MAEpB,uBACA,uBACGd,EAAKM,YAAYS,MAAQ,mCAEzBf,EAAKM,YAAYS,MAChBf,EAAKM,YAAYS,KAAKhB,KAAI,SAACiB,EAAOC,GAChC,OAAUD,EAAV,QAGN,qBAAIhB,EAAKkB,kB,kCC3DvB,IAAMC,EAAa,CAAC,2BAA4B,2BAE5C3B,EAAQ2B,EAAWC,SAASC,KAAKC,SAAWH,EAAWI,SAE5C/B,O,kCCJf,8DAMMgC,EAAM,SAAC,GAAsD,EAApDC,UAAqD,IAA1CjC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,YAAac,EAAqB,EAArBA,MAAOmB,EAAc,EAAdA,QAC3CC,EAAaC,wBAAbD,SADyD,EAEhDE,YAAeC,GAAxBC,KAEiGC,aAAjGC,EAJyD,EAIzDA,aAAcC,EAJ2C,EAI3CA,cAAeC,EAJ4B,EAI5BA,mBAAoBC,EAJQ,EAIRA,QAAS1C,EAJD,EAICA,aAAc2C,EAJf,EAIeA,gBAE1EC,EAAM,CACV9C,MAAOA,GAASyC,EAChBxC,YAAaA,GAAe0C,EAC5B5B,MAAM,GAAI6B,GAAU7B,GAASb,GAC7B6C,IAAI,GAAIH,EAAUT,GAIpB,OADAa,QAAQC,IAAId,GAEV,YAAC,SAAD,CAAQnC,MAAO8C,EAAI9C,MAAO0C,cAAeA,GACvC,oBAAMQ,QAAQ,UACd,yBAAQlD,GACR,oBAAMmD,KAAK,2BAA2BC,QAAQ,gDAC9C,oBAAMD,KAAK,cAAcC,QAASN,EAAI7C,cACtC,oBAAMkD,KAAK,QAAQC,QAASN,EAAI/B,QAC/B+B,EAAIC,KAAO,oBAAMM,SAAS,SAASD,QAASN,EAAIC,OAC/Cb,EAAiB,KAAS,oBAAMmB,SAAS,UAAUD,QAAQ,YAC5DN,EAAI9C,OAAS,oBAAMqD,SAAS,WAAWD,QAASN,EAAI9C,QACpD8C,EAAI7C,aAAe,oBAAMoD,SAAS,iBAAiBD,QAASN,EAAI7C,cAChE6C,EAAI/B,OAAS,oBAAMsC,SAAS,WAAWD,QAASN,EAAI/B,QACrD,oBAAMoC,KAAK,eAAeC,QAAQ,wBACjCP,GAAmB,oBAAMM,KAAK,kBAAkBC,QAASP,IACzDC,EAAI9C,OAAS,oBAAMmD,KAAK,gBAAgBC,QAASN,EAAI9C,QACrD8C,EAAI7C,aAAe,oBAAMkD,KAAK,sBAAsBC,QAASN,EAAI7C,cACjE6C,EAAI/B,OAAS,oBAAMoC,KAAK,gBAAgBC,QAASN,EAAI/B,UAK7CiB,MASfA,EAAIsB,aAAe,CACjBtD,MAAO,KACPC,YAAa,KACbc,MAAO,KACPmB,SAAS,GAGX,IAAMI,EAAK","file":"component---src-pages-index-js-8cfe78fd35f8a6b723c0.js","sourcesContent":["import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { Link, graphql } from \"gatsby\";\nimport { rhythm } from \"../utils/typography\";\nimport Layout from \"../components/layout\";\nimport title from \"../components/title\";\nimport SEO from \"../components/seo\";\n\nexport default ({ data }) => {\n  return (\n    <Layout menu=\"home\">\n      <SEO title=\"승귤의 개발이야기\" description=\"개발관련된 이야기가 올라옵니다.\" defaultImage=\"/image/gyus.png\" />\n      <div>\n        <h1\n          css={css`\n            display: inline-block;\n            border-bottom: 1px solid;\n          `}\n        >\n          {title}\n        </h1>\n        <h4>{data.allMarkdownRemark.totalCount} Posts</h4>\n        {data.allMarkdownRemark.edges.map(({ node }) => (\n          <div key={node.id}>\n            <Link\n              to={node.fields.slug}\n              css={css`\n                text-decoration: none;\n                color: inherit;\n              `}\n            >\n              <p>\n                {node.frontmatter.image && (\n                  <img src={node.frontmatter.image.childImageSharp.resize.src} width=\"100%\" alt=\"\" />\n                )}\n              </p>\n              <h3\n                css={css`\n                  margin-bottom: ${rhythm(1 / 4)};\n                `}\n              >\n                {node.frontmatter.title}\n              </h3>\n              <span\n                css={css`\n                  color: #bbb;\n                `}\n              >\n                {node.frontmatter.date}\n              </span>\n              <br />\n              <div>\n                {node.frontmatter.tags && <span>tags : </span>}\n\n                {node.frontmatter.tags &&\n                  node.frontmatter.tags.map((value, _) => {\n                    return `${value} `;\n                  })}\n              </div>\n              <p>{node.excerpt}</p>\n            </Link>\n          </div>\n        ))}\n      </div>\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(\n      filter: { frontmatter: { published: { eq: true } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          excerpt(pruneLength: 100, truncate: true, format: PLAIN)\n\n          frontmatter {\n            title\n            date(formatString: \"YYYY.MM.DD\")\n            tags\n            category\n          }\n        }\n      }\n    }\n  }\n`;\n","const blogTitles = [`Fake it till you make it`, \"Focus on just one thing\"]\n\nlet title = blogTitles[parseInt(Math.random() * blogTitles.length)]\n\nexport default title\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helmet } from \"react-helmet\";\nimport { useLocation } from \"@reach/router\";\nimport { useStaticQuery, graphql } from \"gatsby\";\n\nconst SEO = ({ canonical, title, description, image, article }) => {\n  const { pathname } = useLocation();\n  const { site } = useStaticQuery(query);\n\n  const { defaultTitle, titleTemplate, defaultDescription, siteUrl, defaultImage, twitterUsername } = site.siteMetadata;\n\n  const seo = {\n    title: title || defaultTitle,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`,\n  };\n\n  console.log(pathname);\n  return (\n    <Helmet title={seo.title} titleTemplate={titleTemplate}>\n      <meta charSet=\"utf-8\" />\n      <title>{title}</title>  \n      <meta name=\"google-site-verification\" content=\"DKf0uKbVabYGKz0sq8wWSyZz_1vtPx3Pey1ifAguz-E\" />\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n      {seo.description && <meta property=\"og:description\" content={seo.description} />}\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {twitterUsername && <meta name=\"twitter:creator\" content={twitterUsername} />}\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n      {seo.description && <meta name=\"twitter:description\" content={seo.description} />}\n      {seo.image && <meta name=\"twitter:image\" content={seo.image} />}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  article: PropTypes.bool,\n};\n\nSEO.defaultProps = {\n  title: null,\n  description: null,\n  image: null,\n  article: false,\n};\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        titleTemplate\n        defaultDescription: description\n        siteUrl: url\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}